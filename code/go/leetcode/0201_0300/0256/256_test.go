/*
LCR 091.中 粉刷房子

假如有一排房子，共 n 个，每个房子可以被粉刷成红色、蓝色或者绿色这三种颜色中的一种，你需要粉刷所有的房子并且使其相邻的两个房子颜色不能相同。

当然，因为市场上不同颜色油漆的价格不同，所以房子粉刷成不同颜色的花费成本也是不同的。每个房子粉刷成不同颜色的花费是以一个 n x 3 的正整数矩阵 costs 来表示的。

例如，costs[0][0] 表示第 0 号房子粉刷成红色的成本花费；costs[1][2] 表示第 1 号房子粉刷成绿色的花费，以此类推。

请计算出粉刷完所有房子最少的花费成本。

示例 1：

输入: costs = [[17,2,17],[16,16,5],[14,3,19]]
输出: 10
解释: 将 0 号房子粉刷成蓝色，1 号房子粉刷成绿色，2 号房子粉刷成蓝色。

	最少花费: 2 + 5 + 3 = 10。

示例 2：

输入: costs = [[7,6,2]]
输出: 2

提示:

costs.length == n
costs[i].length == 3
1 <= n <= 100
1 <= costs[i][j] <= 20
*/
package leetcode

import (
	"testing"
)

func TestMinCost(t *testing.T) {

}

func minCost(costs [][]int) int {
	// costs[i][j] 表示第 i 个房子刷第 j 种颜色的成本（j=0,1,2 对应三种颜色）
	dp := costs[0]
	for _, cost := range costs[1:] {
		dpNew := make([]int, 3)
		for j, c := range cost {
			// dp[i][j]=min(dp[i−1][(j+1)mod3],dp[i−1][(j+2)mod3])+costs[i][j]
			// (j+1)%3 和 (j+2)%3 就是用于获取除 j 之外的另外两种颜色索引
			// 例如：
			// 如果 j=0 (颜色0)，则 (0+1)%3 = 1 (颜色1), (0+2)%3 = 2 (颜色2)
			// 如果 j=1 (颜色1)，则 (1+1)%3 = 2 (颜色2), (1+2)%3 = 0 (颜色0)
			// 如果 j=2 (颜色2)，则 (2+1)%3 = 0 (颜色0), (2+2)%3 = 1 (颜色1)
			dpNew[j] = min(dp[(j+1)%3], dp[(j+2)%3]) + c // min(当前选其他两种颜色的成本)+ 当前颜色的成本
		}
		dp = dpNew
	}
	return min(min(dp[0], dp[1]), dp[2])
}
